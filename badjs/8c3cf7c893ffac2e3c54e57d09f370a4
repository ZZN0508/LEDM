// content in this file will be inserted directly to templates markup
// without compiling so be careful when you need changing
// something in this file or when you using import
(function () {
  var DATA_ANIMATION_ATTRIBUTE = 'data-init-website-animation';
  var body = document.querySelector('body');
  body.setAttribute(DATA_ANIMATION_ATTRIBUTE, '');
})();

  var _yts = _yts || [];
  var tracking_tag = document.getElementById("site_analytics_tracking");
  _yts.push(["_siteId", tracking_tag.getAttribute('data-id')]);
  _yts.push(["_userId", tracking_tag.getAttribute('data-user')]);
  _yts.push(["_partnerId", tracking_tag.getAttribute('data-partner')]);
  _yts.push(["_trackPageview"]);

  (function() {
    function isRunInEditor() {
      try {
        return Boolean(window.parent.ws);
      } catch (e) {
        return false;
      }
    }

    function injectScript() {
      var yts = document.createElement("script");
      yts.type = "text/javascript";
      yts.async = true;
      yts.src = document.getElementById("site_analytics_tracking").getAttribute('data-url');
      (document.getElementsByTagName("head")[0] || document.getElementsByTagName("body")[0]).appendChild(yts);
    }

    if (!isRunInEditor()) {
      var isCookiesAccepted = false;
      var windowLoaded = false;

      document.addEventListener('DOMContentLoaded', function() {
        var wsCookieBannerElement = document.querySelector('ws-cookie-banner');

        if (wsCookieBannerElement) {
          wsCookieBannerElement.addEventListener('ws:cookie-banner', function(event) {
            if (event.detail && event.detail.accepted) {
              if (windowLoaded){
                injectScript();
              } else {
                isCookiesAccepted = true;
              }
            }
          });
        } else {
          isCookiesAccepted = true;
        }
      });

      window.addEventListener('load', function() {
        if (isCookiesAccepted){
          injectScript();
        }

        windowLoaded = true;
      })
    }
  })();
// content in this file will be inserted directly to templates markup
// without compiling so be careful when you need changing
// something in this file or when you using import
(function () {
  var DATA_OBSERVED_ATTRIBUTE = 'data-ws-observed-slots';

  function isRunInEditor() {
    try {
      return Boolean(window.parent.ws);
    } catch (e) {
      return false;
    }
  }

  var createScheduler = function createScheduler(ms) {
    var index = 0;
    var que = [];

    function removeFromQue(targetTask) {
      var targetTaskIndex = que.findIndex(function (task) {
        return task === targetTask;
      });

      if (targetTaskIndex >= 0) {
        que.splice(targetTaskIndex, 1);
      }
    }

    function execute(cb) {
      var task = {
        isExecuted: false,
        isPlanned: false
      };

      task.execute = function () {
        task.isExecuted = true;
        cb();
      };

      task.immediatelyExecute = function () {
        var currentTask = task;
        var executionQue = [currentTask];

        while (currentTask.prevTask && !currentTask.prevTask.isExecuted) {
          currentTask = currentTask.prevTask;
          executionQue.push(currentTask);
        }

        executionQue.reverse().forEach(function (targetTask) {
          targetTask.execute();
          targetTask.cancel();
        });

        if (task.nextTask) {
          task.nextTask.scheduleExecution();
        }
      };

      task.cancel = function () {
        if (task.timerId) {
          clearTimeout(task.timerId);
        }

        task.isCanceled = true;
        removeFromQue(task);
      };

      task.scheduleExecution = function () {
        task.isPlanned = true;

        if (task.isCanceled) {
          return;
        }

        task.timerId = setTimeout(function () {
          task.execute();
          task.isPlanned = false;
          removeFromQue(task);

          if (task.nextTask) {
            task.nextTask.prevTask = null;
            task.nextTask.scheduleExecution();
          }
        }, ms);
      };

      if (que.length) {
        var prevTask = que[que.length - 1];
        prevTask.nextTask = task;
        task.prevTask = prevTask;
      } else {
        task.scheduleExecution();
      }

      index += 1;
      task.id = index;
      que.push(task);
      return task;
    }

    return {
      execute: execute
    };
  };

  function setObservedAttrs(target, attributes) {
    if (!target.firstElementChild) return;
    target.firstElementChild.setAttribute(DATA_OBSERVED_ATTRIBUTE, attributes);
  }

  function observeSlots(entry) {
    var target = entry.target,
        elementPositionY = entry.boundingClientRect.y;

    if (elementPositionY >= 0) {
      var slotAttribute = target.getAttribute('slot');

      var _target$closest = target.closest('ws-block'),
          observedSlots = _target$closest.observedSlots;

      if (slotAttribute) {
        observedSlots.add(slotAttribute);
      }

      if (observedSlots.size) {
        setObservedAttrs(target.closest('ws-block'), Array.from(observedSlots).join(' '));
      }
    }
  }

  function setObservedSlots(entry) {
    var target = entry.target,
        elementPositionY = entry.boundingClientRect.y;

    if (elementPositionY < 0) {
      var slotAttribute = target.getAttribute('slot');

      var _target$closest2 = target.closest('ws-block'),
          observedSlots = _target$closest2.observedSlots;

      observedSlots.add(slotAttribute);

      if (observedSlots.size) {
        setObservedAttrs(target.closest('ws-block'), Array.from(observedSlots).join(' '));
      }
    }
  }

  var scheduler = createScheduler(300);
  var schedulerList = new Map();
  var intersectionObserver = new IntersectionObserver(function (entries, observer) {
    entries.forEach(function (entry) {
      var target = entry.target,
          isIntersecting = entry.isIntersecting,
          _entry$boundingClient = entry.boundingClientRect,
          elementPositionY = _entry$boundingClient.y,
          elementPositionBottom = _entry$boundingClient.bottom;

      if (!isIntersecting && elementPositionY < 0 || isIntersecting && elementPositionY < 0 && elementPositionBottom >= 0) {
        setObservedSlots(entry, observer);

        if (schedulerList.get(entry.target)) {
          schedulerList.get(entry.target).immediatelyExecute();
        }

        observer.unobserve(target);
        return;
      }

      if (isIntersecting && elementPositionY >= 0) {
        var task = scheduler.execute(function () {
          observeSlots(entry, observer);
        });
        schedulerList.set(entry.target, task);
      }
    });
  });

  var initObservingSlots = function initObservingSlots(element) {
    element.querySelectorAll('ws-block').forEach(function (blockNode) {
      if (blockNode.clearObservedSlots) blockNode.clearObservedSlots();
    });
    element.querySelectorAll('[slot]').forEach(function (slot) {
      if (slot.closest('[slot="header"], [slot="footer"]')) {
        if (slot.getAttribute('slot') !== 'header' && slot.getAttribute('slot') !== 'footer') {
          return;
        }
      }

      var block = slot.closest('ws-block');
      block.observedSlots = new Set();
      intersectionObserver.observe(slot);
    });
  };

  initObservingSlots(document);

  var startObserveAddedBocks = function startObserveAddedBocks() {
    var containerObserver = new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        mutation.addedNodes.forEach(function (node) {
          if (node instanceof HTMLElement && node.matches('ws-block')) {
            initObservingSlots(node);
          }
        });
      });
    });
    var container = document.querySelector('body > .page-container');
    containerObserver.observe(container, {
      childList: true
    });
  };

  if (isRunInEditor()) {
    startObserveAddedBocks();
  }
})();
(function(){window['__CF$cv$params']={r:'652b7c9ee9b33b8d',m:'4174e669ddf32353e910c6927cd7b53d32be5af2-1621575802-1800-AVguorldy/kxruTbfPyHnecMl0ZqQD/CT4f3QHTv8EEKulxTKnB5e02o8QMiH6qApUUmH5SgzZ4Z9XHlJDuDd7P52BRAaDJiEcMLtvSpx/KUEyJUS8pyXUa3myDK+pQxIg==',s:[0xd55f40bdc8,0x94ce55cf6b],}})();