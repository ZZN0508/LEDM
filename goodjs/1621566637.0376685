
        var isSessionStorageAvailable = (function() {
            try {
                return !!window['sessionStorage'];
            } catch (e) {
                return false;
            }
        })();

        if (!true || (isSessionStorageAvailable && sessionStorage.getItem('DefaultSignInCalledBefore') === 'true') || 'NewUserView' === 'SignoutUserView') {
            document.body.style.display = "block";
        }
    

        $(function () {
            HomePage.init();
            var cookieConsentBannerNeeded = false;

            var viewType = 'NewUserView';

            function initializeLogging() {
                var el = document.getElementById('sharedClientStartupContext');
                var sharedClientStartupContext = el && el.textContent && JSON.parse(el.textContent) || {};

                var unauthConfigEl = document.getElementById('unauthConfig');
                var unauthConfig = unauthConfigEl && unauthConfigEl.textContent && JSON.parse(unauthConfigEl.textContent) || {};
                var analyticsConsentRequired = cookieConsentBannerNeeded && !unauthConfig.userConsentStatus.AnalyticsCookiesConsented;

                var ariaContext = {
                    ariaCollectorUrl: sharedClientStartupContext.ariaCollectorUrl,
                    ariaTenant: sharedClientStartupContext.ariaTenant,
                    authTypeString: '',
                    authVersion: '',
                    cookieConsentRequired: analyticsConsentRequired,
                    corpNet: sharedClientStartupContext.corpNet,
                    correlationId: sharedClientStartupContext.correlationId,
                    deploymentEnvironment: sharedClientStartupContext.deploymentEnvironment,
                    devEnvironment: sharedClientStartupContext.devEnvironment,
                    features: '',
                    flights: sharedClientStartupContext.flights,
                    geoName: sharedClientStartupContext.geoName,
                    puid: '',
                    requestOrigin: sharedClientStartupContext.requestOrigin,
                    serverBuildDate: sharedClientStartupContext.buildDateUtc,
                    serverBuildId: sharedClientStartupContext.buildId,
                    sessionId: sharedClientStartupContext.sessionId,
                    tenantId: '',
                    testTraffic: sharedClientStartupContext.testTraffic
                };
                StandaloneAriaLogger.Logger.Initialize(ariaContext, true);

                var config = {
                    coreData: {
                        appId: "www.office.com-unauth",
                        pageName: "UnauthOhp"
                    }
                };

                awa && awa.init(config);

                var expIds = [];
                var expNames = [];
                var variationIds = [];
                var variationNames = [];

                var overrideValues = {
                    behavior: expIds.length ? awa.behavior.EXPERIMENTATION : 0,
                    pageTags: {
                        metaTags:{
                            expid: expIds.join(","),
                            expname: expNames.join(","),
                            variationid: variationIds.join(","),
                            variationname: variationNames.join(",")
                        }
                    }
                }

                awa && awa.ct.captureContentUpdate(overrideValues);
            }

            function addUnauthTelemetry(){
                $('button, a').click(function() {
                    var elementId = $(this).attr("id");
                    if (elementId) {
                        StandaloneAriaLogger.Logger.LogUnauthClick(viewType, elementId);
                    }
                });

                // always log unauth page successfully loaded regardless of page is displayed or not
                StandaloneAriaLogger.Logger.LogEvent('unauth_generic', 'unauth_page_loaded')
                if (!true || (isSessionStorageAvailable && sessionStorage.getItem('DefaultSignInCalledBefore') === 'true') || 'NewUserView' === 'SignoutUserView' ) {
                    // only log page view if page is displayed
                    StandaloneAriaLogger.Logger.LogUnauthPageView(viewType);
                }
            }

            initializeLogging();
            addUnauthTelemetry();
        });
    

        var el = document.getElementById('unauthConfig');
        var config = el && JSON.parse(el.textContent) || {};
        var signInUrl = config.loginUrl;
        if (true) {
            if (isSessionStorageAvailable && sessionStorage.getItem('DefaultSignInCalledBefore') !== 'true') {
                var viewType = 'NewUserView';

                if (viewType !== "SignoutUserView") {
                    var myConfigOptions = {
                        msaConfig: { replyUri: 'https://www.office.com/', host: 'login.live.com' },
                        aadConfig: { replyUri: 'https://www.office.com/' , host: 'login.microsoftonline.com', appId: '4345a7b9-9a63-4910-a426-35363201d503' },
	                    preferredIdp: AuthType.aad,
                        enableConsoleLogging: false,
                        msaFedEnabled: true };

                    DefaultSignInHandler.DefaultSignInAdapter.signIn(signInUrl, myConfigOptions, 500).then(function(loginUrl) {
                        if (isSessionStorageAvailable) {
                            sessionStorage.setItem('DefaultSignInCalledBefore', 'true');
                        }

                        if (loginUrl) {
                            window.location.href = loginUrl;
                        } else {
                            document.body.style.display = "block";
                            StandaloneAriaLogger.Logger.LogUnauthPageView(viewType);
                        }
                    });
                }
            } else {
                StandaloneAriaLogger.Logger.LogEvent('unauth_generic', 'DefaultSignin_Called_Before');
            }
        }

        function setShellOptions(shellOptions) {

            if (window.msCommonShell) {
                window.msCommonShell.load(shellOptions);
            } else {
                window.onShellReadyToLoad = function () {
                    window.onShellReadyToLoad = null;
                    window.msCommonShell.load(shellOptions);
                }
            }
        }

        var SendMeControlSignInEvent = function() {
            awa && awa.isInitialized && awa.ct.capturePageAction($('#meControl'), { isManual: true, behavior: awa.behavior.SIGNIN, actionType: awa.actionType.CLICKLEFT });

            if (typeof StandaloneAriaLogger !== 'undefined' && typeof StandaloneAriaLogger.Logger !== 'undefined' && typeof StandaloneAriaLogger.Logger.LogUnauthClick !== 'undefined') {
                var viewType = 'NewUserView';
                StandaloneAriaLogger.Logger.LogUnauthClick(viewType, 'meLnkSignin');
            }
        }

        function SetConsent() {
            var cookieConsentBannerNeeded = false;
            if (cookieConsentBannerNeeded) {
                var mscc = window.mscc;
                // Remove this SetConsent when WCP is 100%
                if (!window.WcpConsent && mscc && !mscc.hasConsent()) {
                    mscc.setConsent();
                }
            }
        }

        var shellOptions = {
                meControlOptions: {
                    rpData: {
                        aadInfo: {
                            signInUrl: signInUrl,
                            signOutUrl: 'https://login.microsoft.com/logout.srf'
                        },
                        msaInfo: {
                            meUrl: null
                        },
                        preferredIdp: 'aad'
                    },
                    events: {
                        onEventLog: function(eventId) {
                            switch (eventId) {
                                case 'SignIn':
                                    SetConsent();
                                    SendMeControlSignInEvent();
                                    break;
                                default:
                                    return;
                            }
                        }
                    }
                }
            };

        setShellOptions(shellOptions);


            if (window.history && window.history.replaceState) {
                config.pathAndQuery && window.history.replaceState(window.history.state || {}, '', config.pathAndQuery);
            }
                

        var aadUserForgetUrlFormat = "https://login.microsoftonline.com/forgetuser?sessionid=";
    
function clearStorage() {
    try {
        if (window && window.sessionStorage) {
            clearStorageWithExceptions(window.sessionStorage, ['DefaultSignInCalledBefore', 'msameid']);
        }
        if (window && window.localStorage) {
            var workload = '';
            if (document && document.getElementById) {
                var workloadElem = document.getElementById('workload');
                if (workloadElem) {
                    workload = workloadElem.innerText;
                }
            }
            if (workload && workload === 'pwa') {
                clearStorageWithExceptions(window.localStorage, ['officeHome-']);
            }
            else {
                clearStorageWithExceptions(window.localStorage);
            }
        }
    }
    catch (err) {
        console.log(err);
    }
}
function clearStorageWithExceptions(storage, exceptions) {
    if (!exceptions || exceptions.length === 0) {
        storage.clear();
        return;
    }
    var keys = [];
    for (var i = 0; i < storage.length; i++) {
        keys.push(storage.key(i));
    }
    var _loop_1 = function (i) {
        var key = keys[i];
        var shouldDelete = true;
        exceptions.forEach(function (val) {
            if ((key === null || key === void 0 ? void 0 : key.lastIndexOf(val)) !== -1) {
                shouldDelete = false;
            }
        });
        if (key && shouldDelete) {
            storage.removeItem(key);
        }
    };
    for (var i = 0; i < keys.length; i++) {
        _loop_1(i);
    }
}
clearStorage();
